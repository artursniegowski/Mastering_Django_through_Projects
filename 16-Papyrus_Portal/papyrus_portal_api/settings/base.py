"""
Django settings for papyrus_portal_api project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

import environ 

# configuring enviromental variables
env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
# bc we created settings folder and added there the settings
ROOT_DIR = Path(__file__).resolve().parent.parent.parent

# new app dir since we moved all or our apps to the core_apps folder
APP_DIR = ROOT_DIR / "core_apps"

# SECURITY WARNING: don't run with debug turned on in production!
# by default DEBUG is goign to be false
DEBUG = env.bool("DJANGO_DEBUG", False)

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "django_filters",
    "django_countries",
    "phonenumber_field",
    "drf_yasg",
    "corsheaders",
    "djcelery_email",
    "rest_framework.authtoken",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "taggit",
    # Django Elasticsearch integration
    "django_elasticsearch_dsl",
    # Django REST framework Elasticsearch integration (this package)
    "django_elasticsearch_dsl_drf",
]

LOCAL_APPS = [
    "core_apps.profiles",
    "core_apps.common",
    "core_apps.users",
    "core_apps.articles",
    "core_apps.ratings",
    "core_apps.bookmarks",
    "core_apps.responses",
    "core_apps.search",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    # TODO: add this middleware for porduction !!
    # "whitenoise.middleware.WhiteNoiseMiddleware",  # adding white noise for production
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "papyrus_portal_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            ROOT_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "papyrus_portal_api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": "mydatabase",
#     }
# }

DATABASES = {"default": env.db("DATABASE_URL")}

# Password hashers
# https://docs.djangoproject.com/en/4.2/topics/auth/passwords/#using-argon2-with-django
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Berlin"

USE_I18N = True

USE_TZ = True

# Enabling the sites framework
# https://docs.djangoproject.com/en/4.2/ref/contrib/sites/#enabling-the-sites-framework
SITE_ID = 1

# setting admin url over a enviromental variable
# https://appliku.com/post/customize-django-admin-interface
ADMIN_URL = "supersecret/"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/staticfiles/"
STATIC_ROOT = str(ROOT_DIR / "staticfiles")

MEDIA_URL = "/mediafiles/"
MEDIA_ROOT = str(ROOT_DIR / "mediafiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# A regex which restricts the URL’s for which the CORS headers will be sent.
# https://pypi.org/project/django-cors-headers/
CORS_URLS_REGEX = r"^/api/.*$"

# Specify the custom user model
AUTH_USER_MODEL = "users.User"

# configuration for celery
CELERY_BROKER_URL = env("CELERY_BROKER")
CELERY_RESULT_BACKEND = CELERY_BROKER_URL  # setting the backedn to redis
CELERY_ACCEPT_CONTENT = ["json"]  # format of the messages sent to the queue
CELERY_TASK_SERIALIZER = "json"  # format of the messages sent to the queue
CELERY_RESULT_SERIALIZER = "json"  # format of the messages sent to the queue
# maximum number of retries in the case of a recoverable exception
# so try 10 times before giving up
CELERY_RESULT_BACKEND_MAX_RETRIES = 10
# the tasks and event will be sent for every task, so tasks can be
# tacked before they are consumed by a worker
CELERY_TASK_SEND_SENT_EVENT = True

if USE_TZ:
    CELERY_TIMEZONE = TIME_ZONE

# configuration DRF
# configuration for django-rest-framework-simplejwt
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # this class will allow us to authneticate users using JWT tokens
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        # all endpoints are protected by default
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        # setting a default filter backedn for all endpoints
        "django_filters.rest_framework.DjangoFilterBackend"
    ],
}

# configuration for simple JWT (djangorestframework-simplejwt)
# Some of Simple JWT’s behavior can be customized through settings variables in settings.py:
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("Bearer",),  # Authorization: Bearer <token>
    # can be anythnging 5-10 mins, max 30 mins - normally
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    # determinates whether to rotate the refresh token on each refresh request
    # the new refresh token will be supplied via a refresh key in the JSON response.
    "ROTATE_REFRESH_TOKENS": True,
    # signing key is a secret key that will be used to sing the tokens
    "SIGNING_KEY": env("SIGNING_KEY"),
    # this is the filed that will be used to indetify the user in the token
    "USER_ID_FIELD": "id",
    # claim that will be used to indetify the user in the token, for example
    # setting a value of user_id would mean generated tokens, include a user_id claim
    "USER_ID_CLAIM": "user_id",
}


# configuration for dj-rest-auth
# dj-rest-auth behaviour can be controlled by adjust settings in settings.py:
# https://dj-rest-auth.readthedocs.io/en/latest/configuration.html
REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_COOKIE": "papyrus-portal-access-token",  # setting the cookie name for the JWT authentication
    "JWT_AUTH_REFRESH_COOKIE": "papyrus-portal-refresh-token",  # setting the cookie name for refresh token for the JWT authentication # noqa
    # this serializer will be used for registration and we are going to use
    # a custom serizalizer, we are creating custom seriazlier bc we want to add
    # some extra fields to the registration process
    "REGISTER_SERIALIZER": "core_apps.users.serializers.CustomRegisterSerializer",
}

# configuration for django-allauth
# https://docs.allauth.org/en/latest/installation/quickstart.html
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]

# configuration for django-allauth
# https://docs.allauth.org/en/latest/account/configuration.html#configuration
ACCOUNT_AUTHENTICATION_METHOD = "email"  # using email to authenticate our user
ACCOUNT_EMAIL_REQUIRED = True  # email is required for sign up
# Determines the email verification method during signup
# mandatory => the user is blocked from logging in until the email address is verified
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
# Determines whether or not an email address is automatically confirmed by a GET request
# determinates if we can confirm the email address on a get request
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
# Determines the expiration date of email confirmation mails (# of days).
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
# user model field is the name of the fields containing the username, if any
# and since we are not using usernames in our application, we are going to set this to none
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
# The user is required to enter a username when signing up. - bc we are using email
ACCOUNT_USERNAME_REQUIRED = False

# Django Elasticsearch DSL
# connection settings for elasticsearch
# https://django-elasticsearch-dsl.readthedocs.io/en/latest/quickstart.html#install-and-configure
# defult connection alias for the default ES coonection
# specifies the host and port where Elasticsearch service is running
ELASTICSEARCH_DSL = {
    "default": {
        # es - name of the elastic search container
        # Elasticsearch DSL in your Django settings assumes that it should
        # connect to Elasticsearch using HTTP. However, Docker container
        # networking can sometimes be a bit finicky when it comes to name
        # resolution and URL parsing
        # 'hosts': 'es:9200',
        # To ensure that it works consistently, using 'http://es:9200'
        # specifies the protocol explicitly, which can help avoid issues
        # related to URL resolution and default protocols.
        "hosts": "http://es:9200",
    },
}

# Loggers
# https://docs.djangoproject.com/en/4.2/topics/logging/#logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(name)-12s %(asctime)s %(module)s "
            "%(process)d %(thread)d %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {
        "level": "INFO",
        "handlers": ["console"],
    },
}
